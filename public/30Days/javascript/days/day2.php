<?php
$Name_Page = str_replace('.php' , '' , basename(__FILE__));
$Name_File = 'JavaScript';
?>
<!doctype html>
<html lang="fa" dir="rtl">
<head>
    <?php include MAIN_DIR . "public/Main/meta-main.php" ?>
    <link rel="stylesheet" href="<?= MAIN_SERVER . 'assets/css/FullStyle.css' ?>">  <!-- Style Main seed -->
    <link rel="stylesheet" href="<?= MAIN_SERVER . 'public/30Days/style.css' ?>">  <!-- Style This Page -->
    <link rel="stylesheet" href="<?= MAIN_SERVER . 'assets/vendor/prism.css' ?>">  <!-- Style Prism Library -->
    <title> <?= $Name_Page . ' ' . $Name_File ?>  </title>
</head>
<body>

<!-- HEADER -->
<?php require MAIN_DIR . "public/Main/Header.php" ?>
<!-- END HEADER -->


<!-- MAIN -->
<?php
// Number Of Day
$test = str_replace("day"  , '' , $Name_Page);
$test = [$test-1 , $test+1 , $test]; // 0 -> Pre  , 1 -> Nex , 2 -> Current
?>
<!-- Subject -->
<section class="container subject">
    <h1>
        <?= "$Name_File 30 Days" ?> (جاوا اسکریپت در 30 روز)
        -
        روز
        <?= $test[2] ?>
        <br>
        &gt;&gt;
        انواع داده ها
    </h1>
    <p>راهنمای قدم به قدم برای تبدیل شدن به برنامه نویس جاوا اسکریپت در <b>30 روز</b></p>
    <br>
    <div class="row options">
        <div class="col-xs-12 col-s-12 col-l-6">
            <a href="<?= MAIN_SERVER ?>">تمامی نقشه راه ها</a>
        </div>
        <div class="col-xs-12 col-s-12 col-l-6" style="text-align: left">
            <a href='<?= MAIN_GITHUB . "/issues/new?title=[Suggestion] $Name_File Developer - 30Days" ?>'
               target="_blank">پیشنهاد
                تغییر - نقشه راه بهتر</a>
        </div>
    </div>
    <section class="between">
        <hr class="between">
        <h2><a href="<?= MAIN_SITE ?>" target="_blank">Subscribe</a></h2>
        <h2><a href="<?= site_url($Name_File) ?>"><?= $Name_File ?></a></h2>
        <h2>Day <?= $test[2] ?></h2>
    </section>
</section>

<!-- Start Previous and Next Days -->
<div class="container Pre_Nex">
    <div class="row">
        <a href="<?='day'.$test[1]?>" class="col-xs-5 col-md-2">
            &rarr;
            روز بعدی (
            <?=$test[1] ?>
            )
        </a>
        <div class="col-xs-2 col-md-8"></div>
        <a href="<?='day'.$test[0]?>" class="col-xs-5 col-md-2">
            روز قبلی (
            <?=$test[0] ?>
            )
            &larr;
        </a>
    </div>
</div>
<!-- End Previous and Next Days -->

<br>
<!-- Start List -->
<section class="container list30days">
    <ul>
        <li><a href="#day-2">روز دوم</a>
            <ul>
                <li><a href="#data-types">انواع داده ها</a>
                    <ul>
                        <li><a href="#primitive-data-types">داده ها ابتدایی</a></li>
                        <li><a href="#non-primitive-data-types">داده های غیر ابتدایی</a></li>
                    </ul>
                </li>
                <li><a href="#numbers">اعداد</a>
                    <ul>
                        <li><a href="#declaring-number-data-types">اعلان انواع داده های عددی</a></li>
                        <li><a href="#math-object">Math Object (شئ ریاضی)</a>
                            <ul>
                                <li><a href="#random-number-generator">ساخت اعداد تصادفی</a></li>
                            </ul>
                        </li>
                    </ul>
                </li>
                <li><a href="#strings">رشته ها</a>
                    <ul>
                        <li><a href="#string-concatenation">الحاق رشته ها (اتصال رشته ها)</a>
                            <ul>
                                <li><a href="#concatenating-using-addition-operator">الحاق به وسیله عملگر افزودن (+)</a></li>
                                <li><a href="#long-literal-strings">رشته های طولانی</a></li>
                                <li><a href="#escape-sequences-in-strings">کارکتر های کنترلی</a></li>
                                <li><a href="#template-literals-template-strings">استفاده از متغیر در رشته ها (قالب رشته - Template String)</a></li>
                            </ul>
                        </li>
                        <li><a href="#string-methods">توابع کار با رشته (String Methods)</a></li>
                    </ul>
                </li>
                <li><a href="#checking-data-types-and-casting">چک کردن انواع داده و تبدیل آنها به هم</a>
                    <ul>
                        <li><a href="#checking-data-types">چک کردن انواع داده</a></li>
                        <li><a href="#changing-data-type-casting">تبدیل انواع داده به هم (Casting)</a>
                            <ul>
                                <li><a href="#string-to-int">String to Int (رشته به اعداد صحیح)</a></li>
                                <li><a href="#string-to-float">String to Float (رشته به اعداد اعشاری)</a></li>
                                <li><a href="#float-to-int">Float to Int (اعداد اعشاری به اعداد صحیح)</a></li>
                            </ul>
                        </li>
                    </ul>
                </li>
                <li><a href="#day-2-exercises">تمرینات روز دوم</a>
                    <ul>
                        <li><a href="#exercise-level-1">تمرین : سطح 1</a></li>
                        <li><a href="#exercise-level-2">تمرین : سطح 2</a></li>
                        <li><a href="#exercises-level-3">تمرینات : سطح 3</a></li>
                    </ul>
                </li>
            </ul>
        </li>
    </ul>
</section>
<!-- End List -->

<!-- Start Article -->
<article class="container">
    <h1 id="day-2">روز اول :</h1>
        <h1 id="data-types">انواع داده</h1>
            <div>
                <p>
                    در قسمت قبلی در مورد انواع داده صحبت کردیم ، ولی امروز قراره یکم توش دیپ تر (عمیقتر) بشیم و اصلا ببینم انواع داده به چند
                    دسته کلی تقسیم میشن ؛ در حالت کلی میتونیم انواع داده ها رو به دو دسته خوشگل تقسیم بندی کنیم :
                </p>
                <ol>
                    <li>انواع داده ابتدایی (اولیه)</li>
                    <li>انواع داده غیر ابتدایی</li>
                </ol>
            </div>
            <h2 id="primitive-data-types">داده ها ابتدایی</h2>
                <div>
                    <p>
                        انواع داده های ابتدایی در جاوا اسکریپت رو در جلسه قبل مورد بررسی قرار دادیم اما بهتره یه بار دیگه مرور کنیم :
                        (به صورت کلی اگه بخوام فرق بین داده های ابتدایی و غیر ابتدایی رو بخوام بهتون بگم ، اینه که داده های ابتدایی داده های از قبل تعریف شده هستند و با استفاده از داده ها ، داده های غیر ابتدایی به وجود میاد ، یا به صورت علمی تر داده های غیر ابتدایی ، داده هایی پیچیده تری هستند که جلوتر میفهمید!)
                    </p>
                    <ol>
                        <li>Numbers - اعداد صحیح و اعشاری</li>
                        <li>Strings - هر دیتایی که بین تک کوتیشن (') دبل کوتیشن (") یا بکتیک (`) قرار بگیره</li>
                        <li>Booleans - فقط درست یا نادرست</li>
                        <li>Null - مقدار خالی</li>
                        <li>Undefined - متغیر بدون مقدار</li>
                        <li>Symbol - اینو تاحالا ندیده بودید و کمتر هم استفاده میشه ولی اگه بخوام توضیحی بدم که متوجه بشید ، این نوع داده کلید های یکتا میسازه (یعنی وقتی دو متغیر با مقدار یکسان از این نوع داده بسازید با هم هیچ وقت برابر نیستند!)</li>
                        این پایین چنتا مثال از انواع داده ها براتون زدم تا بهتر متوجه بشید :)
                    </ol>
                    <pre>
                        <code>
                            let name = "Amir" // اینجا یه متغیر از نوع رشته تعریف کردیم
                            let num = 13 //یه متغیر از نوع صحیح
                            name[0] = "B"
                            /*
                             جلوتر در مورد [] صحبت میکنیم که چیه اما الان بدونید که با استفاده از براکت ها میتونیم به اعضای آرایه
                            دسترسی پیدا کنیم که جلوتر در مورد آرایه هم توضیح میدم !
                            در اینجا هم با استفاده از براکت میخواستم کارکتر اول متغیر رو تغییر بدم که از
                            Bmir تبدیل به Amir
                            بشه ، اما اگر این کد رو اجرا کنید به ارور میخورید ، چون نمیتونیم یکی از خونه های متغیر های ابتدایی رو تغییر بدیم
                            */
                        </code>
                    </pre>
                    <p>
                        در بالا یه توضیح کوچولو دادم اما یکی از فرق های مهم داده های ابتدایی با داده های پیچیده همینه (ما نمیتونیم مقداری که به یک متغیر دادیم رو یک قسمتشو تغییر بدیم ، به مثال زیر توجه کنید :)
                    </p>
                    <pre>
                        <code>
                            let name = "Boos" //اینجا که یه متغیر تعریف کردیم و بهش مقدار دادیم
                            name = "Hadith" //اینجا مقدار کلیه متغیر رو تغییر دادیم
                            name[1] = 'A' // اینجا میخوایم کارکتر دوم حدیث رو تغییر بدیم که نمیشه به علت همون نکته بالا

                            /*
                            توجه کنید که ما میتونیم مقدار متغیر ها رو هرچقدر که خواستیم تغییر بدیم اما نمیتونیم یه قسمتی از داده های ابتدایی رو تغییر بدیم
                            همچنین داخل براکت نوشتم 1 ولی گفتم کارکتر دوم رو تغییر میده ، چرا ؟ چون که توی برنامه نویسی همه چی از 0 شروع میشه
                            پس کارکتر اول میشه 0 ، دوم میشه 1 و الی آخر
                            */
                        </code>
                    </pre>
                    <p>
                        برای نکته پایانی هم بیاید یه مقایسه بین متغیر ها آنجام بدیم و یه چیزی یاد بگیرم :)
                    </p>
                    <pre>
                        <code>
                            let numOne = 3
                            let numTwo = 3

                            console.log(numOne == numTwo)      // true چیزیه که بر میگردونه

                            let js = 'JavaScript'
                            let py = 'Python'

                            console.log(js == py)             //false چیزی که برمیگردونه

                            let lightOn = true
                            let lightOff = false

                            console.log(lightOn == lightOff) // false چیزی که برمیگردونه
                        </code>
                    </pre>
                    <p>
                        به == میگن عملگر مقایسه ایی ، یعنی هر وقت بین دوتا چیز قرار داده بشه اون دوتا رو مقایسه میکنه
                        و اگر برابر بودن True و اگر غلط بودن False بر میگردونه ، همچنین میتونید دوتا عدد خالی رو باهم مقایسه کنید (حتما نباید دوتا متغیر باشه)
                        ، عملگر های مقایسه ایی زیادی داریم که کار های متفاوتی میکنن ولی فعلا همینو پس ذهنتون داشته باشید تا به بقیش برسیم.
                    </p>
                </div>
            <h2 id="non-primitive-data-types">داده های غیر ابتدایی</h2>
                <div>
                    <p>
                        برعکس داده های ابتدایی ، داده های غیر ابتدایی قابل تغییر هستند (بازم به این نکته توجه کنید که همه متغیر ها میتونن تغیر کنند ولی اگر نوع دادشون ابتدایی باشه نمیتونید یه قسمت خاصی رو به طور مستقیم ویرایش کنید)
                         برای مثال با آرایه شروع میکنیم ، آرایه ها یک نوع داده غیر ابتدایی هستند و بخوام خیلی راحت توضیح بدم ، متغیر هایی هستند که میتونن چندین مقدار داشته باشن و اصلا هم اهمیت نداره که
                        اعضاشون نوع داده یکسان یا غیر یکسان داشته باشن ، یعنی یه آرایه میتونه دو تا عضو رشته ایی و دو تا عضو عددی داشته باشه و راحت زندیگشو ادامه بده!
                        همونجوری که قبلا هم یه اشاره ایی کردم در جاوا اسکریپت و اکثر زبان های برنامه نویسی (و شایدم همشون) آرایه ها ، عضوهاشون از 0 شروع میشه یعنی اولین عضو (ایندکس) اونا اندیس 0 داره اگه متوجه شدید که ایول
                        نشدید هم پایینو یه نگاه بندازید دیگه!
                    </p>
                    <pre>
                        <code>
                            let numbers = [1 , 2 , 3 , 4 , 5 ] //این یه آرایه با 5 عضوعه که اندیس 0 تا 4 داره
                            console.log(numbers[1]) // الان توی خروجی 2 رو چاپ میکنه ینی دومین عضو آرایه بالا

                            numbers[4] = 7 // الان بدون اروریم ، و تونستیم عضو پنجم متغیر بالا یعنی 5 رو تبدیل به 7 کنیم
                            console.log(numbers) //الان هم توی خروجی کل آرایه یعنی [1,2,3,4,7] چاپ میشه
                        </code>
                    </pre>
                    <p>
                        اگر توجه کنید برای دسترسی به کل آرایه نیازی به براکت نداریم و اگر بخوایم به یک عضو از آرایه دسترسی پیدا کنیم نیاز به براکت داریم :(
                        <br>
                        حالا بزارید یه نکته رو همین جا بهتون بگم ، در بالاتر دیدیم که انواع داده های ابتدایی قابل مقایسه هستند ، ولی
                        در آرایه ها دو آرایه دقیقا مشابه هم ، با هم برابر نیستند ، مثال زیرم یه نگاه بندازید :
                    </p>
                    <pre>
                        <code>
                            let nums = [1, 2, 3]
                            let numbers = [1, 2, 3]

                            console.log(nums == numbers)  // false
                        </code>
                    </pre>
                    <p>
                        با مثال بالا متوجه شدید که آرایه ها و داده های غیر ابتدایی قابل مقایسه نیستند ، پس لطفا نکنید!!! اگر میخواید بدونید چرا ؟ میتونید سرچ کنیدددد(بدون شوخی سرچ کردن بهتون خیلی کمک میکنه!)
                        <br>
                        در هر صورت من یکم وراجم و خودم یه توضیح میدم ، داده های غیر ابتدایی رو داده های مرجع هم صدا میکنن حالا چرا ؟ چون وقتی
                        شما یک داده مرجع میسازید این داده ها یجایی تو حافظه ذخیره میشن تا اینجاش مثل متغیر هاست اما از این به بعد
                        یکمی فرق داره ، توی متغیرها (داده های ابتدایی) خود مقادیر باهم مقایسه میشن اما توی داده های مرجع
                        آدرس حافظه ها با هم مقایسه میشن و نه خود مقادیر (و دوتا متغیر متفاوت آدزس متفاوتی دارن پس دوتا چیز متفاوت باهم برابر نیست)
                        این زیر یه مثال زدم ببینید عشقشو ببرید :
                    </p>
                    <pre>
                        <code>
                            let nums = [1, 2, 3]  // یه متغیر در آدرس مثلا 111 ساختیم
                            let numbers = nums  // حالا متغیر قبلی رو به این متغیر پاس میدیم ، پس این متغیرم آدرسش میشه 111

                            console.log(nums == numbers)  // true
                            /*
                            دقیقا مثل مثال قبلی کد نوشتیم ، اما این دفعه متغیر اول رو به متغیر دوم پاس دادیم
                            با این کار باعث میشیم جاوا اسکریپت فک کنه هر دو متفیر به یک آدرس اشاره میکنن (pointer)
                            برای همین وقتی مقایسه شون میکنیم جواب درست رو برمیگردونه

                            توجه داشته باشید که الان هر دو متغیر دارن به یه جا اشاره میکنن پس اگر یکم باهوش باشید
                            میفهمید که اگر یک عضوی تغییر کنه برای هر دو متغیر تغییر کرده مثل زیر
                            */
                            nums[0] = 3 // الان عضو اول متغیر رو از 1 به 3 تفییر دادم
                            console.log(num)  // Print [3,2,3]
                            console.log(numbers) // Print [3,2,3]

                            // میبینید که من فقط عضو متغیر اول رو تغییر دادم ولی متغیر دوم هم عضواش تغییر کرد
                            // چون که هردوشون داشتن به یه آدرس توی حافظمون اشاره میکردن ، اره جون دلم اینشکلیاس
                        </code>
                    </pre>
                    <p>
                         اگر براتون سخت درکه این مسائل ، فقط بگم تنها نیستید همه اولش همین مشکلاتو دارن ولی بعدا مث آب خوردن میشه براتون ،
                        فعلا آروم باشید و ادامه بدید بعدا دوباره برگردید و بخونید اگر هم اطلاعات بیشتری نیاز داشتید سرچ کنید تا با داده های مرجع و اشاره گر بیشتر اشنا بشید.
                    </p>
                </div>
        <h1 id="numbers">اعداد</h1>
            <div>
                <p>
                    قبلا در مورد این نوع داده صحبت کردیم و گفتیم این نوع داده ، اعداد صحیح و اعشاری رو در بر میگیره و میتونید باهاشون هر عملیات ریاضی رو انجام بدید قشنگا !
                </p>
            </div>
            <h2 id="declaring-number-data-types">اعلان انواع داده های عددی</h2>
                <div>
                    <pre>
                        <code>
                            let age = 21
                            const born = 1381  //یادتون که نرفته این متغیر ثابت میسازه یعنی نمیتونید جلوتر تغییرش بدید به هیچ وجه
                            var PI = 3.14
                            let height = 190 //قد بلند کی بودم
                            let weight = 70 // با این قد و وزن قشنگم هنوززز
                        </code>
                    </pre>
                </div>
            <h2 id="math-object">Math Object (شئ ریاضی)</h2>
                <div>
                    <p>
                        ببینید دوستان ما به جز آرایه ، شی هم داریم که جلوتر باهاش آشنا میشیم ، شی ها هم نوع داده غیر ابتدایی هستند و چرا بهش میگن شی ؟ چون مثل اشیا باهاشون رفتار میکنیم (هرکدوم رفتار یا ویژگی خاص خودشونو دارن مثل دنیای واقعی - برای اطلاعات بیشتر شی گرایی رو سرچ بزنید چون اینو بخوام توضیح بدم باید کلا آموزشو ببندم بزارم کنار)(توجه کنید که در جلسات بعدی در مورد شی ها صحبت میکنیم ولی فعلا یه آشنایی کلی باهاش داشته باشیم تا آموزشو پیش ببریم)
                        <br>
                        حالا اینجا میخوام در مورد شی ریاضی (Math Object) صحبت کنیم ، این شی بهتون کمک میکنه که کار های ریاضی رو انجام بدید و همونطور که بالا
                        گفتم اشیا در برنامه نویسی رفتار و ویژگی های خودشونو دارن این شی هم ویژگیش کار محاسباتیه ، این زیر چنتا از ویژگی هاش (توابع و ثابت ها) رو براتون توضیح دادم :
                    </p>
                    <pre>
                        <code>
                            const PI = Math.PI  // این که دیگه مشخصه عدد پی رو برمیگردونه
                            console.log(PI)  //Print 3.1415926535


                            // توابع پایین هم مثل کنسول دات لاگ مقادیری رو میگیرن و در جواب چیزیو بر میگردونن
                            // !توابع برای شی همون رفتارشونه

                            console.log(Math.round(PI))    //  عدد رو گرد میکنه ، اینجا عدد 3.14 رو گرد میکنه و میشه 3

                            console.log(Math.round(13.99))    //   اینجا هم با گرد کردن باعث میشه جواب بشه 14

                            console.log(Math.floor(PI))    //  به سمت پایین گرد میکنه ، جواب میشه 3

                            console.log(Math.Ceil(PI))    // به سمت بالا گرد میکنه ، جواب میشه 4

                            console.log(Math.max(1 , 2 ,3 , 13 , 4))    // بیشترین مقدار رو بین ورودی ها بر میگردونه که میشه 13

                            console.log(Math.min(13 , 25 , 34))    // کمترین مقدار رو برمیگردونه که میشه بازم 13

                            const randNum = Math.random() // عددی رندوم بین 0 تا 1 (بجز خود 1) برمیگردونه
                            console.log(randNum)

                            const num = Math.floor(Math.random () * 11)
                            // عددی رندوم بین 0 تا 10 رو ایجاد میکنه (0 تا 0.99 ضبدر 11 میشه و بعد به پایین گرد میشه)
                            console.log(num)

                            console.log(Math.abs(-10)) // قدر مطلق رو حساب میکنه (منفی رو تبدیل به مثبت میکنه)

                            console.log(Math.sqrt(9)) // ریشه دوم رو میگیره که اینجا میشه 3

                            console.log(Math.pow(2,3)) // عدد اول رو به توان عدد دوم میرسونه که اینجا میشه 8

                            console.log(Math.E) // عدد اولر (پایه لگاریتم طبیعی) رو برمیگردونه

                            console.log(Math.log(2)) // لگاریتم طبیعی عدد رو برمیگردونه

                            // به ترتیب لگاریتم طبیعی 2 و 10 رو برمیرگدونه
                            console.log(Math.LN2)
                            console.log(Math.LN10)

                            // از اینام خیلی بدم میاد و دیگه روشونه ، مثلثات
                            console.log(Math.sin(60))
                            console.log(Math.cos(60))
                        </code>
                    </pre>
                </div>
                <h3 id="random-number-generator">ساخت اعداد تصادفی</h3>
                    <div>
                        <p>
                             در بالا دیدیم یه تابع هست به نام Math.random که این تابع عددی رندوم بین 0 تا ...0.99999999 بر میگردونه و اینجا اولین الگوریتم رو یاد میگیرد ،
                            اونم به این شکله که وقتی بین 0 تا 1 دریافت میکنید ، اگر ضبدر 10 کنید اعداد بین 0 تا 9.9999 رو دریافت میکنید ، برای حل این مشکل
                            و همینطور حذف اعشار باید یه ترفند به کار برید اونم اینه که او ضبدر 11 کنید که میشه 0 تا 10.9999 بعد باید اعداد رو به پایین گرد کنید ، اینجوری
                            همه اعشار ها از بین میرن و اعداد 0 تا 10 براتون باقی میمونه
                            <br>
                            خودتون تست کنید ببینید میتونید کاری کنید که اعداد 1 تا 10 رو برگردونه ؟
                            <br>
                            جواب : باید اول ضبدر 10 کنید ، که میشه 0 تا 9.9999 و بعد گرد کنید به بالا ، اینجوی میشه 1 تا 10 و اعشار هم نداریم!
                        </p>
                        <pre>
                            <code>
                                const num2 = Math.ceil(Math.random () * 10)
                            </code>
                        </pre>
                    </div>
        <h1 id="strings">رشته ها</h1>
            <div>
                <p>
                    قبلا در مورد رشته ها گفتیم و دیگه تکرار نمیکنم فقط در زیر چنتا مثال زدم (رشته ها درون تک کوتیشن (') ، دابل کوتیشن (") و بک تیک (`) میتونن قرار بگیرن!)
                </p>
                <pre class="line-numbers">
                    <code class="language-js">
                        let space = ' ' ;
                        let empty = '' ;
                        let firstName = 'Amir' ;
                        let country = 'FreeDom Iran' ;
                        let city = "Tehran" ;
                        let job = "programmer" ;
                        let text = "salam be Hame 'Donya'" ' ;
                        let backtick = `Okay Baby` ;
                    </code>
                </pre>
                <p>
                    جلوتر در مورد فرق بین بک تیک و تک کوتیشن رو مورد بررسی قرار میدیم ، ولی تا فعلا همشون یکار میکنن!
                </p>
            </div>
            <h2 id="string-concatenation">الحاق رشته ها (اتصال رشته ها)</h2>
                <div>
                    <p>
                        تا اینجا یه چیزایی یاد گرفتیم و ایشالله به خاطر سپردید ؛ حالا میرسیم به متصل کردن رشته ها بهم ؛ برای این کار میتونید از عملگر
                        + استفاده کنید و رشته هارو بهم بچسبونید (کار جمع اعداد رو هم انجام میده) ، اما توصیه میکنم از این روش استفاده نکنید
                        هم یخورده قدیمی شده و هم توی ورژن جدید جاوا اسکریپت (ES6) روش های بهتری برای این کار هست و انقدر خستتون نمیکنه (جلوتر روش های دیگرو توضیح میدم ، ولی فعلا این روشو پس کلتون داشته باشید!)
                    </p>
                </div>
                <h3 id="concatenating-using-addition-operator">الحاق به وسیله عملگر افزودن (+)</h3>
                    <div>
                        <pre>
                        <code>
                            let name = 'amir'
                            let age = '21'
                            let job = 'Developing'

                            let fullText = 'My Name is" + name + "and i am" + age + 'Years Old.' ;
                            console.log(fullText , 'my job is' , job );
                            // My Name is amir and i am 21 Years Old. my job is Developing
                            /*
                            در مثال بالا میبینم که با استفاده از عملگر + میتونیم رشته ها و متغیر هارو بهم بچسبونیم
                            فقط حواستون باشه که اگه رشته نباشه و عدد باشه ، باهم دیگه جمع میشن
                            */
                        </code>
                    </pre>
                    </div>
                <h3 id="long-literal-strings">رشته های طولانی</h3>
                    <div>
                        <p>
                            حالا فرض کنید مقدار رشته ایی که میخواید بنویسید و داخل متغیر قرار بدید ، یه کلمه یا چند کلمه نیست و قراره یه داستان یا متن طولانی بنویسید ،
                            اونجا که میرسید میگید خب توی یه خط جا نمیشه پس برم خط بعدی بنویسم ، ولی اینجاست که به ارور میخورید
                            تو جاوا اسکریپت نمیتونید همینجوری سرتونو بندازید پایین و برید خط بعدی و ادامه رشته رو بنویسید ، پس باید چیکار کنیم ؟
                            هیچی آخر هر خط بک اسلش (\) قرار میدید و میرید خط بعدی مثل زیر :
                        </p>
                        <pre data-line="6-8">
                            <code>
                                let name = ' Lorem ipsum dolor sit amet, consectetur \
                                            adipisicing elit. Cum, quibusdam \
                                            loremsdjasds adasdsd s dh '
                                // الان خط بالا ارور نمیده اما خط پایین ارور میده

                                let name2 = 'Lorem ipsum dolor sit amet, consectetur
                                            adipisicing elit. Cum, quibusdam
                                            loremsdjasds adasdsd s dh '

                            </code>
                        </pre>
                    </div>
                <h3 id="escape-sequences-in-strings">کارکتر های کنترلی</h3>
                    <div>
                        <p>
                            حالا که در مورد بک اسلش حرف زدیم باید در مورد کارکتر های کنترلی هم بهتون توضیح بدم که خیلی خیلی آسونه (اول اینکه چرا بهشون میگیم کارکتر های کنترلی ؟ چون که یچیزایی رو برامون کنترل میکنن که به صورت ثابت نمیتونیم ازشون استفاده کنیم ، مثلا اگه بخواید برید خط بعدی یا صدای کامپیوتر (بوق بیپ) رو در بیارید نیاز دارید که از یه کارکتر خاص استفاده کنید ، چون روی کیبورد چیزی نیست که بشه این کارو کرد ، و همونطور که دیدید برای رفتن به خط بعدی جاوا اسکرپیت بدون بک اسلش بهتون اجازه نمیده و فک میکنه رفتید خط بعد برای دستور جدید!)
                            <br>
                            من این پایین مهم تریناشونو میگم و طریقه استفاده هم همین زیر براتون میزارم (یه سرچم در موردش بکنید بد نیست!)
                        </p>
                        <ol style="font-weight: bolder">
                            <li>n\ : براتون خط جدید ایجاد میکنه (مثل اینتر عمل میکنه)</li>
                            <li>t\ : معنی تب روی کامیپوتر رو میده (یعنی 4 یا 8 تا فضای خالی)</li>
                            <li>\\ : این خود بک اسلشه ، اگر بخواید از بک اسلش توی رشته استفاده کنید به صورت خالی نمیتونید</li>
                            <li>'\ : اینم خود تک کوتیشنه</li>
                            <li>"\ : اینم خود دابل کوتیشنه</li>
                            این پایین تستشم میزارم برا شما قشنگا!
                        </ol>
                        <pre>
                            <code>
                                console.log('I hope everyone is enjoying the 30 Days Of JavaScript challenge.\nDo you ?') // line break
                                // دستور بالا رو اگه بدون کارکتر کنترلی استفاده کنید ، توی کنسول همرو توی یه خط نمایش میده
                                // اما وقتی از کارکتر کنترلی استفاده میکنید توی کنسول توی دو خط نمایش میده
                                // توجه کنید که بالا تر از بک اسلش خالی استفاده کردیم ، اون باعث خط جدید نمیشه و فقط برای نمایش بهتر برای شما برنامه نویسای جوونه!

                                console.log('Days\tTopics\tExercises') //Print : Days   Topics  Exercises
                                console.log('Day 1\t3\t5') //Print : Day 1  3   5

                                console.log('This is a backslash  symbol (\\)')
                                console.log('In every programming language it starts with \"Hello, World!\"')
                                console.log("In every programming language it starts with \'Hello, World!\'")
                                console.log('The saying \'Seeing is Believing\' isn\'t correct in 2020')
                                /*
                                البته توجه داشته باشید که شما میتونید از تک کوتیش داخل دابل کوتیشن و برعکسش ، بدون استفاده
                                از کارکترهای کنترلی استفاده کنید ، اما برای استفاده تک کوتیشن داخل تک کوتیشن یا دابل کوتیشن داخل دابل کوتیشن
                                نیازه که از این کارکتر های کنترلی حتما استفاده کنید!
                                */
                            </code>
                        </pre>
                    </div>
                <h3 id="template-literals-template-strings">استفاده از متغیر در رشته ها (قالب رشته - Template String)</h3>
                    <div>
                        <p>
                            اینجا میرسیم به فرق بین تک کوتیشن (') و بک تیک (`) ، یکمی بالاتر دیدیم ، وقتی میخوایم دو رشته رو به هم متصل کنیم
                            باید از + استفاده کنیم که یخورده کارمونو سخت میکنه ، اینجا میخوام بهتون بگم چجوری میتونید رشته ها و متغیر هارو
                            بهم متصل کنید بدون استفاده از عملگر + ولی باید دو نکته رو فراموش نکنید ، اول اینکه باید از بک تیک (`)
                            استفاده کنید و دوم اینکه باید متغیرتونو داخل آکولاد بزارید و قبلش یه علامت دلار ($) هم قرار بدید مثل زیر :
                        </p>
                        <pre>
                            <code>
                                let name = 'amir'
                                let age = '21'
                                let job = 'Developing'

                                let fullText = 'My Name is" + name + "and i am" + age + 'Years Old.' ;
                                console.log(fullText , 'my job is' , job );
                                // این که روش قبلیمون بود ، حالا همین بالایی رو به روش جدید انجام میدیم :

                                let fullText2 = `My Name is ${name} and i am ${age} Years Old`;
                                console.log(fullText2 , `my job is ${job}`);

                                // حتی میتونید از این روش برای مثال زیر استفاده کنید که کارتونو خیلی راحت تر میکنه
                                let a = 2 ;
                                let b = 3 ;
                                console.log(`The Sum of ${a} and ${b} is ${a+b}`);
                                // print : The Sum of 2 and 3 is 5
                            </code>
                        </pre>
                        <p>
                            قبلا با == آشنا شدید ، حالا 4 تا چیز دیگم بهتون یاد میدم ، عملگر های مقایسه ایی < و > و =< و => این ها هم عملگر های مقایسه ایی هستند
                            و فقط درست و نادرست برمیگردونن ، کارشونم که خیلی مشخصه بزرگتر ، کوچیکتر ، بزرگتر مساوی ، کوچیکتر مساوی رو براتون انجام میده (مثلا 4 < 6 درسته ، پس مقدار True بر میگرده) حالا
                            با این تفاسیر بیاین مثال زیرو ببینیم :
                        </p>
                        <pre>
                            <code>
                                let a = 4 ;
                                let b = 6 ;
                                console.log(`${a} Bozorg Tar Az ${b} : ${a > b}`);
                                // به شکل بالا هم میتونید ازش استفاده کنید و چیزی که چاپ میکنه میشه :
                                // 4 Bozorg Tar Az 6 : False
                            </code>
                        </pre>
                    </div>
            <h2 id="string-methods">توابع کار با رشته (String Methods)</h2>
                <div>
                    <p>
                        قبلا که داشتیم در مورد انواع داده صحبت میکردیم ، گفتیم که داده های ابتدایی قابل تغییر نیستند ، اینجا یچیزی میخوام بهش اضافه کنم ، اینکه
                        توی جاوا اسکریپت همه چیز شی است (همون شی گرایی معروف که گفتم یه سرچ بزنید بد نیست) حتی یک رشته ساده با نام شما هم یک شی هست ، پس میشه روی این اشیا
                        کار های عیجب غریبی کرد (مثلا تو دنیای واقعی یه بادکنکو میشه پر از آب کرد بعد رو سر مزاحم ترکوند ، توی جاوا اسکریپت هم میشه روی اشیا حرکت هایی زیادی زد که جلوتر میبینیم چه حرکتایی)
                        <br>
                        <b>
                            چون همه چیز تو جاوا اسکریپت شی هست برای استفاده از توابع هر شی میتونید از نقطه (.) استفاده کنید ، بالاتر توی شی Math هم دیدیم که برای
                            استفاده از توابع بعد از Math از نقطه (.) استفاده میکردیم و بعد از اون اسم تابع رو صدا میزدیم.
                        </b>
                        <br>
                        فقط تا یادم نرفته دوباره ذکر کنم که رشته ها نوع داده اولیه هستند پس بعد از ایجاد نمیتونیم اجزاشونو تغییر بدیم ولی توابع زیادی هست که میتونه به ما در کار با رشته ها کمک کنه که در زیر یه چنتایی که مهم هستند رو بهتون میگیم (یخورده زیادن متأسفانه ولی انگلیسی یخورده بلد باشید براتون مث سیب خوردنه!)

                    </p>
                    <br><br>
                    <p>
                        <b>
                            تابع length :
                        </b>
                        همونطوری که از اسمش پیداست طول یک رشته رو بعلاوه فضای خالیه بینش برمیگردونه
                    </p>
                        <pre>
                            <code>
                                let js = 'Java Script'
                                console.log(js.length) // print 11

                                let name = 'Amir     Roox'
                                console.log(js.length) // print 13
                            </code>
                        </pre>
                    <p>
                        <b>
                        دسترسی به کارکتر های رشته :
                        </b>
                        قبلا هم گفتیم که میتونید با استفاده از براکت [] به اجزای یک رشته دسترسی پیدا کنیم ، اما نمیتونیم تغییرش بدیم! (و یادتون باشه کارکترها از 0 شروع میشن ، کارکتر اول اندیس 0 ، کارکتر دوم اندیس 1 و الی آخر)
                    </p>
                        <pre>
                            <code>
                                let myName = 'Amir Mohammad'
                                let firstChar = myName[0] // کارکتر اول متغیر بالا رو به این متغیر دادم
                                console.log(firstChar) // print A

                                let lastIndex = myName.length - 1
                                /*
                                اینجا طول رشته رو منهای یک کردیم تا اندیس آخر آرایه یعنی عضو 12 به دست بیاد ، چون اگر یادتون باشه
                                گفتیم اعضای آرایه از 0 شروع میشن پس اگر طول یه رشته 13 تا باشه آخرین عضوش میشه 12 و اولین میشه 0
                                */
                                console.log(lastIndex)  // Print 12
                                console.log(myName[lastIndex])    // اینجا هم میخوایم آخرین عضو متغیر رو برگردونیم
                            </code>
                        </pre>
                    <p>
                        <b>
                            تابع toUpperCase :
                        </b>
                        اینم مشخصه چه کاری میکنه ، همه ی کارکتر هارو تبدیل به کارکتر بزرگشون میکنه (احیانا متوجه شدید برای انگلیسی فقط کاربرد داره دیگه !؟)
                    </p>
                        <pre>
                                <code>
                                let js = 'Java Script'
                                console.log(js.toUpperCase()) // print : JAVA SCRIPT

                                // توجه داشته باشید که حتما حتما همینجوری بنویسید ، جاوا اسکریپت به حروف حساسه (CaseSensitive)
                                // و دوتا متغیر مثل
                                // NAme , name
                                // با همدیگه فرق دارن و به دو نقطه متفاوت اشاره میکنن
                                // در توابع هم همینه ، هرجوری که اینجا مشاهده میکنید توابع رو بنویسید
                                // Just (toUpperCase)  True
                                // (toUpperCASE)  FALSE
                                </code>
                        </pre>
                    <p>
                        <b>
                            تابع toLowerCase :
                        </b>
                   اینم برعکس بالای کار میکنه و همه حروف رو تبدیل به حروف کوچیکشون میکنه!
                    </p>
                        <pre>
                                <code>
                                    let js = 'Java Script'
                                    console.log(js.toLowerCase()) // print : java script
                                </code>
                        </pre>
                    <p>
                        <b>
                            تابع substr :
                        </b>
                        این تابع قسمتی رو از رشته مورد نظر ما جدا میکنه ، و دوتا آرگومان (ورودی تابع) میگیره
                        اولیش ایندکس شروع کننده و دومیش تعداد کارکترهای مورد نیازه ، مثال زیرو ببینید همونجا توضیح بدم :(
                    </p>
                        <pre>
                                <code>
                                    let js = 'JavaScript'
                                    console.log(js.substr(1,4)) // print : avaS
                                    /*
                                     در تابع بالا اولین آرگومان رو یک دادیم پس میره و توی رشته مورد نظر ایندکس 1 رو میگیره
                                    ایندکس 1 میشه حرف آ انگلیسی (ایندکس ها از 0 شروع میشن)
                                    در قسمت بعدی آرگومان دوم رو برابر با 4 قرار دادیم ، پس از آ انگلیسی به بعد ، 4 تا
                                    کارکتر بر میداره که میشه
                                    avaS
                                    */
                                </code>
                        </pre>
                    <p>
                        <b>
                            تابع substring :
                        </b>
                        این تابع هم مثل تابع بالا قسمتی از رشته رو جدا میکنه ، ولی نحوه استفاده اش فرق داره ؛
                        آرگومان اول این تابع ایندکس ابتدایی و آرگومان دوم ایندکس انتهایی رو مشخص میکنه و اگر ایندکس دوم مشخص نباشه
                        از ایندکس مشخص شده تا آخر رشته رو برمیگردونه! بازم این زیر مثال گذاشتم بهتر متوجه بشید
                    </p>
                        <pre>
                                <code>
                                    let js = 'JavaScript'
                                    console.log(js.substring(4,7)) // print : Scr
                                    /*
                                     ما اینجا آرگومان اول رو 4 دادیم پس ایندکس چهارم رشته بالا رو میگیره
                                    بعد بهش گفتیم تا ایندکس هفتم رو برای ما برگردون
                                    توجه کنید که خود ایندکس هفت رو بر نمیگردونه
                                    فرق این تابع با تابع بالایی در اینه که تابع اول به تعداد انتخابی شما
                                     رشته را برمیگردونه ، اما در این تابع اول و آخر رشته رو
                                    مشخص میکنید و همون رو برمیگردونه
                                    */

                                    console.log(js.substring(4)) //print : Script
                                    /*
                                    اینجا ما فقط یه آرگومان به تابع پاس دادیم ، پس ایندکس چهارم تا آخر
                                    رشته رو برمیگردونه

                                    برای اینکه نحوه کار توابع یادتون بمونه
                                    دستورات رو اینجوری بخونید :
                                    جدا کن از متغیر جی اس ایندکس 4 ام تا ایندکس 7 ام رو
                                    */
                                </code>
                        </pre>
                    <p>
                        <b>
                            تابع split :
                        </b>
                        این تابع هم همونطوری که از اسمش پیداست رشته شما رو با استفاده از آرگومانی که بهش دادید جدا میکنه
                        و هر عضو رو به صورت آرایه بهتون برمیگردونه
                        مثلا رشته Amir, mohammad, hadith رو میخوایم به واسطه , از هم جدا کنیم
                        از این تابع استفاده میکنیم تا رشته ما رو به آرایه ایی به این شکل تبدیل کنه ["Amir" , "mohammad" , "hadith"]
                        <br>
                        در هر صورت مثال زیرم یه نگاه بندازید شاید خوشتون اومد!
                    </p>
                        <pre>
                                <code>
                                    let string = '30 Days Of JavaScript'

                                    console.log(string.split())     // Changes to an array -> ["30 Days Of JavaScript"]
                                    console.log(string.split(' '))  // Split to an array at space -> ["30", "Days", "Of", "JavaScript"]

                                    let firstName = 'Amir'

                                    console.log(firstName.split())    // Change to an array - > ["Amir"]
                                    console.log(firstName.split(''))  // Split to an array at each letter ->  ["A", "m", "i", "r"]

                                    let countries = 'Finland, Iran, Norway, Denmark, and Iceland'

                                    console.log(countries.split(','))  // split to any array at comma -> ["Finland", " Iran", " Norway", " Denmark", " and Iceland"]
                                    console.log(countries.split(', ')) //  ["Finland", "Iran", "Norway", "Denmark", "and Iceland"]
                                </code>
                        </pre>
                    <p>
                        <b>
                            تابع trim :
                        </b>
                        این تابع هم کار خیلی ساده ایی میکنه ، و فضای خالی اول و آخر رشته رو براتون حذف میکنه
                    </p>
                    <pre>
                                <code>
                                    let string = '   30 Days Of JavaScript   '

                                    console.log(string)
                                    console.log(string.trim(' '))  // Print : '30 Days Of JavaScript'

                                    let firstName = ' Amir '

                                    console.log(firstName)
                                    console.log(firstName.trim())  // اینم مثل بالایی فضای خالی اول و آخر رو حذف میکنه
                                    // در کل چه بهش آرگومان پاس بدید چه ندید یه کار میکنه
                                </code>
                        </pre>
                    <p>
                        <b>
                            تابع includes :
                        </b>
                        این تابع یکی از تابع های دوست داشتنیه منه ، و تست میکنه که آیا چیزی که دنبالش میگردیم داخل رشته ما
                        وجود داره یا نه ، پس یا True برمیگردونه یا False (چرا خوشم میاد ؟ به خودم مربوطه!!!)
                    </p>
                    <pre>
                                <code>
                                    let country = 'IRan'

                                    console.log(country.includes('ira'))     // false
                                    console.log(country.includes('IR'))     // true
                                    console.log(country.includes('Ran'))    // true
                                    console.log(country.includes('iran'))    // false

                                    /*
                                    توجه داشته باشید که به حروف بزرگ و کوچیک حساسه
                                    برای اینکه نحوه کار توابع یادتون بمونه
                                    دستورات رو اینجوری بخونید :
                                    آیا در متغیر کانتری رشته فلان وجود دارد؟
                                    اینجوری میفهمید که درست یا غلط برمیگردونه
                                    */
                                </code>
                        </pre>
                    <p>
                        <b>
                            تابع replace :
                        </b>
                        این تابع هم یکی از توابع پر کاربرده که در داخل یک رشته میگرده و رشته انتخابی شما رو با رشته دیگه ایی تعویض میکنه ، مثل زیر
                    </p>
                        <pre>
                            <code>
                                string.replace(استرینگ جدید, استرینگ قدیمی)
                            </code>
                        </pre>
                        <pre>
                                <code>
                                    let string = '30 Days Of JavaScript'
                                    console.log(string.replace('JavaScript', 'PHP')) // 30 Days Of PHP

                                    /*
                                    در این تابع دنبال آرگومان اول میگرده و اگر پیداش کرد با آرگومان دوم تعویض میکنه
                                    توجه کنید که به حروف حساسه و از همه مهم تر ، فقط وقتی به اولین رشته رسید اون رو
                                    تعویض میکنه و با بقیه رشته های مشابه کاری نداره (پسر خوبیه)
                                    */
                                </code>
                        </pre>
                    <p>
                    <p>
                        <b>
                            توجه داشته باشید که هر تابع خروجی خودش رو داره ، مثلا خروجی تابع بالا string یا همون رشته است ولی خروجی تابع includes درست یا غلطه ،
                            حتما به این موارد دقت داشته باشید ؛ یادتونه گفتم داده های اولیه رو نمیتوند اجزاشونو به صورت مستقیم تغییر بدیم ؟
                            حالا با چیزایی که یاد گرفتیم این پایینو داشته باش :
                        </b>
                    </p>
                    <pre>
                        <code>
                            let name = "Amir" ;
                            name[0] = "B" ;
                            // اینو قبلا هم دیدید که گفتم با این دستور کارکتر اول متغیر تغییر نمیکنه

                            name = name.replace('A' , 'B');
                            console.log(name);
                            // اما با این روش بالا تونستیم کارکتر اول رو تغییر بدیم
                            // توجه کنید که ما به صورت مستقیم رشته رو تغییر ندادیم
                            // بلکه توی متغیر دنبال حرف آ گشتیم و تبدیلش کردیم به ب
                            // و همنوجوری که گفتم خود این تابع ، رشته برمیگردوند ، پس کلمه
                            // Bmir
                            // رو برمیگردونه و ما اونو دوباره به متغیر پاس میدیم
                            //  :( اینجوری متغیر مقدارش تغییر میکنه بدون اینکه مستقیم رشته رو تغییر بدیم ، که البته اصلا نمیتونستیم
                        </code>
                    </pre>
                    <p>
                        <b>
                            تابع charAt :
                        </b>
                        یکی دیگه از تابع های پر کاربرد این تابع است ، حالا این تابع چیکار میکنه ؟
                        ایندکس رو به عنوان آرگومان میگیره و مقدار اون کارکتر رو از رشته برمیگردونه
                    </p>
                    <pre>
                        <code>
                            string.charAt(ایندکس)
                        </code>
                    </pre>
                    <pre>
                                <code>
                                    let string = '30 Days Of JavaScript'
                                    console.log(string.charAt(0))        // 3
                                    // ایندکس 0 رو پاس دادیم پس کارکتر اول یعنی 3 رو برمیگردونه

                                    let lastIndex = string.length - 1
                                    console.log(string.charAt(lastIndex)) // t
                                    // اینجا هم مثل قبل میخواستیم آخرین ایندکس رو برگردونیم

                                    // توجه کنید که میتونید به صورت مستقیم هم از این دستور استفاده کنید ، مثل زیر
                                    console.log(string.charAt(string.length - 1)) // t
                                    // تو دستور بالا دیگه از متغیر اضافه استفاده نکردیم و مستقیم استفاده کردیم
                                    // شما هم میتونید این کارو بکنید اما حواستون باشه که خروجی
                                    // یک تابع به ورودی تابع دیگه بخوره مثلا همینجا
                                    // string.length - 1
                                    // خروجی عددی داره برای همین میتونه توی ورودی
                                    // string.charAt()
                                    // قرار بگیره ، ولی اگر چیزی غیر از عدد بود باعث خطا میشد
                                </code>
                        </pre>
                    <p>
                        <b>
                            تابع charCodeAt :
                        </b>
                         این تابع هم مثل بالایی کار میکنه ، با این فرق که به جای برگردوندن کارکتر ، کد اسکی (ASCII) متناسبشو چاپ میکنه (کد اسکی چیه ؟ همونطور که میدونید کامپیوتر ها با
                        سیستم دودویی یا همون 0 و1 کار میکنن پس چجوری کارکتر هارو ذخیره میکنیم ؟ اینجاست که کد های اسکی میان وسط
                        تا به هر کارکتر عددی رو نسبت بدن تا بشه توی کامپیوتر ذخیرش کرد ، برای اطلاعات بیشترم میتونید سرچ کنید و عشق کنید!)
                    </p>
                    <pre>
                        <code>
                            string.charCodeAt(ایندکس)
                        </code>
                    </pre>
                    <pre>
                                <code>
                                    let string = '30 Days Of JavaScript'
                                    console.log(string.charCodeAt(3))        // D ASCII number is 68 - print 68

                                    let lastIndex = string.length - 1
                                    console.log(string.charCodeAt(lastIndex)) // t ASCII is 116  - print 116
                                </code>
                        </pre>
                    <p>
                        <b>
                            تابع indexOf :
                        </b>
                        ایت تابع هم خیلی استفاده میشه و کارش برعکس توابع بالاست ، یعنی شما بهش رشته میدید و اگر داخل متغیر
                        پیداش کرد ، بهتون جایگاهشو رو برمیگردونه (ایندکس از 0 شروع میشه) و اگر رشته شما رو پیدا نکرد منفی 1 بر میگردونه!
                    </p>
                    <pre>
                        <code>
                            string.indexOf(جایگاه سرچ , رشته مورد نظر)
                            // اگر آرگومان دوم رو ندید از اول شروع به جستجو میکنه و اگر آرگومان دوم را یک عدد قرار بدید
                            // میاد از جایگاه اون عدد به بعد حساب میکنه
                        </code>
                    </pre>
                    <pre>
                                <code>
                                    let string = 'Amir Roox'

                                    console.log(string.indexOf('R'))          // 5
                                    console.log(string.indexOf('Days'))       // -1
                                    console.log(string.indexOf('Roox'))       // 5
                                    console.log(string.indexOf('a'))          // -1
                                    console.log(string.indexOf('oo'))         // 6
                                    // توجه کنید که این تابع هم به حروف کوچیک و بزرگ حساسه
                                    // این تابع به اولین رشته که رسید همونو برمیگردونه ، حواستون به اینم باشه


                                    let string2 = "javascript is a best , java!"
                                    console.log(string2.indexOf('ja',5))  //23
                                    // در دستور بالا دنبال رشته میگرده ، اما از ایندکس 5 به بعد شروع میکنه
                                </code>
                        </pre>
                    <p>
                        <b>
                            تابع lastIndexOf :
                        </b>
                        میبینید چنگدره شیرینن این توابع ؟ این یکی تابع هم مث بالاست ، فقط فرقشون اینه که بالایی وقتی به رشته میرسید ایندکسشو برمیگردوند
                        اما تو این تابع ایندکس آخری رو برمیگردونه ، یعنی اگر توی یه متن دوتا java نوشته شده باشه ، ایندکس java دوم
                        رو برمیگردونه ، باز این زیرو نگاه کنید حالشو ببرید :
                    </p>
                    <pre>
                        <code>
                            string.lastIndexOf(جایگاه سرچ , رشته مورد نظر)
                            // اینم مثل تابع بالا دو آرگومان میگیره و عددی که بهش پاس میدید رو ایندکس شروع جستجو در نظر میگیره
                            /*
                            فقط توجه داشته باشید که چون این تابع از آخر رشته جستجو میکنه هر عددی که بهش بدید از همون ایندکس به قبل رو محاسبه میکنه
                            یعنی توی رشته پایین
                            amir mohammad love it amir
                            اگه دنبال کلمه امیر بگردیم ، بدون ارگومان دوم ، عدد 22 رو برمیگردونه
                            ولی اگه ارگومان دوم رو عدد 10 قرار بدیم از ایندکس 10 شروع میکنه به قبل (سمت چپ) و عدد 0 رو برمیگردونه
                            */
                        </code>
                    </pre>
                    <pre>
                                <code>
                                    let string = 'I love JavaScript. If you do not love JavaScript what else can you love.'

                                    console.log(string.lastIndexOf('love'))             // 67
                                    console.log(string.lastIndexOf('you'))              // 63
                                    console.log(string.lastIndexOf('JavaScript'))       // 38
                                    console.log(string.lastIndexOf('JavaScript' , 17))  // 7
                                    console.log(string.lastIndexOf('JOJO'))             // -1

                                    // همونطور که میبینید ایندکس آخرین رشته رو برمیگردونه و نه اولیش
                                </code>
                        </pre>
                    <p>
                        <b>
                            تابع concat :
                        </b>
                        قبل از اینکه در مورد این تابع صحبت کنم ، بگم که بالا در مورد الحاق رشته ها صحبت کردیم به الحاق رشته ها یا متصل کردنشون بهم میگن کانکت (concat) ، پس الان
                        درک این تابع هم براتون باید راحت باشه ، این تابع کار همون عملگر + رو میکنه و رشته هایی که بهش پاس میدید رو بهم متصل میکنه ، به همین راحتی !!!
                         برای همین بهتون گفتم جلوتر روش های بهتری برای متصل کردن هست که از دست + خلاص میشید!
                    </p>
                    <pre>
                                <code>
                                    let firstName = "Amir" ;
                                    let lastName = "Roox" ;

                                    console.log(firstName.concat(' ' , 'Ziba'));                // print : Amir Ziba
                                    console.log(firstName.concat(' ' , lastName));              // print : Amir Roox
                                    console.log(firstName.concat(' ' , lastName , ' Ziba'));    // print : Amir Roox Ziba

                                    // اینم یه روش ساده تر برای الحاق رشته ها به همه که از + و بک تیک به نطرم آسون تره
                                </code>
                        </pre>
                    <p>
                        <b>
                            تابع startsWith :
                        </b>
                        حقیقتا من زیاد از این تابع استفاده نکردم ، یعنی برای من ینفر زیاد کاربردی نبوده ولی ممکنه به درد شما بخوره!
                        کار این تابع هم از روش میشه فهمید ، کارش اینه که شما بهش یه رشته پاس میدید و چک میکنه که آیا اول شی اصلی (رشته ابتدایی) قرار داره یا نه (چه کار بیخودی!)
                        اگر رشته مورد نظر وجود داشته باشه که true بر میگردونه و در غیر اینصورت false
                    </p>
                    <pre>
                        <code>
                            string.startsWith(رشته شما)
                        </code>
                    </pre>
                    <p>
                        <b>
                            تابع endsWith :
                        </b>
                        این تابع هم مثل بالاییه فقط جای اینکه اولو چک کنه میره آخرو چک میکنه
                    </p>
                    <pre>
                        <code>
                            string.endsWith(رشته شما)
                        </code>
                    </pre>
                    <pre>
                                <code>
                                    let string = 'Love is the best to in this world'

                                    console.log(string.startsWith('Love'))   // true
                                    console.log(string.startsWith('love'))   // false
                                    console.log(string.startsWith('world'))  // false

                                    let country = 'IRan'

                                    console.log(country.endsWith('an'))   // true
                                    console.log(country.endsWith('IR'))   // false
                                    console.log(country.endsWith('Ran'))  //  true
                                </code>
                        </pre>
                    <p>
                        <b>
                            تابع search :
                        </b>
                        یکی دیگه از تابع های باحال جاوا ساکریپت این تابع است ، دیگه نیازی هم نیست توضیح بدم خداییی!
                        <br>
                        ولی توضیح میدم ! این تابع هم رشته مورد نظری که بهش پاس میدید رو توی شی اصلی پیدا میکنه دقیقا مثل تابع indexOf ولی میپرسید فرقشون چیه ؟
                        فرقشون اینه که تابع indexOF برای پیدا کردن رشته های ساده استفاده میشه ، اما تابع search برای جستجو پیشرفته تر استفاده میشه ، برای اینکه
                        ببینیم سرچ پیشرفته تر چیه باید در مورد یه مسئله ی دیگه صحبت کنیم و اون مسئله چیزی نیست جز regular expression
                        <br>
                        برای اینکه کارتونو تا حدی آسون کنم و نرید گوگل (خدایی دیگه سرچ کردن حال نمیخواد) یه توضیح ریزی اینجا میدم (البته در درس های جلوتر یه روز مختص همینه) :
                        <br>
                        <b>
                            رگولار اکسپریشن یا عبارت های منظم که اصطلاحاً regex یا regexp نامیده می‌شوند در زمان استخراج اطلاعات از هر متنی کاملاً مفید هستند. این عبارت‌ها برای جستجو و یافتن مطابقت یک یا چند الگوی جستجوی خاص مورد استفاده قرار می‌گیرند.
                            ممکنه الان اینجور توضیح برای بعضیا سخت باشه برای همین خودمونی میگم ، فرض کنید یه متن طولانی دارید که داخلش 100 تا شماره تلفن مختلفه که با 09 شروع میشن ،
                            ما برای اینکه بتونیم تمام شماره های داخل این متن رو بدست بیاریم دو تا روش داریم ، یا اینکه دونه دونه بریم بگردیم و شماره ها رو در بیاریم (که واقعا انقدر بیکار نیستیم) یا اینکه
                            یه الگویی بنویسیم تا با اون الگو سرچ انجام بشه ، مثلا برای دریافت شماره ها میتونیم این الگو رو بکار ببریم : دنبال اعداد 11 رقمی هستیم که با 09 شروع میشن ،
                            الان با دادن این الگو به هرکسی طرف متوجه میشه که دنبال چی هستیم ، توی دنیای برنامه نویسی هم به این الگو ها میگن regex یا regular expression که البته برای تعریف کردنش یه قواعدی وجود داره که چنتاشو این زیر میگم
                            برای اطلاعات بیشترم سرو گرد کنید برید گوگل مارم دعا کنید (همون انرژی بفرستید برام)
                        </b>
                    </p>
                    <br>
                    <ol>
                        قراره موضوعات ابتدایی رو اینجا بگم و برای موضوعات پیشرفته‌تر حتما از منابع دیگه ایی استفاده کنید
                        <li>توجه کنید که این الگو در همه زبان ها به یک صورت استفاده میشه فقط بعضی از زبان ها قابلیت های پیشرفته تری اضافه میکنن</li>
                        <li>نکته اول اینکه چیزی که دنبالش میگردید باید بین / قرار بگیره اینجوری : /javaScript/</li>
                        <li>
                            مهارها: ^ و $
                            <ul>
                                <li>/java/ : این ساده‌ترین دستوره و تمام رشته هایی که درونشون java قرار داره رو برمیگردونه</li>
                                <li>/java^/ : این یعنی هر رشته ایی که با java آغاز شده رو برگردون</li>
                                <li>/$java/ : این یعنی هر رشته ایی که با java تموم میشه رو برگردون</li>
                            </ul>
                        </li>
                        <li>
                            سور ها: * + ? {}
                            <ul>
                                <li>/*abc/ : یعنی رشته هایی رو برگردون که اولش ab و در ادامه 0 تا بینهایت c داشته باشه</li>
                                <li>/+abc/ : یعنی رشته هایی رو برگردون که اولش ab و در ادامه 1 تا بینهایت c داشته باشه</li>
                                <li>/?abc/ : یعنی رشته هایی رو برگردون که اولش ab و در ادامه 0 یا 1 دونه c داشته باشه</li>
                                <li>/{2}abc/ : یعنی رشته هایی رو برگردون که اولش ab و در ادامه دقیقا 2 تا c داشته باشه</li>
                                <li>/{,2}abc/ : یعنی رشته هایی رو برگردون که اولش ab و در ادامه 2 تا بینهایت c داشته باشه</li>
                                <li>/{2,5}abc/ : یعنی رشته هایی رو برگردون که اولش ab و در ادامه 2 تا 5 تا c داشته باشه</li>
                                <li>/*a(bc)/ : یعنی رشته هایی رو برگردون که اولش a و در ادامه 0 تا بینهایت bc داشته باشه</li>
                                <li>
                                    با توجه به چیزای بالا فهمیدیم بعد از هر کارکتر میتونیم تعداشون رو مشخص کنیم یعنی اگر داشته باشیم *amir یعنی
                                    رشته هایی رو برگردون که توشون ami رو حتما داشته باشن و در ادامه به تعداد 0 تا بینهایت کارکتر r داشته باشن.
                                    رشته هایی رو برگردون که توشون ami رو حتما داشته باشن و در ادامه به تعداد 0 تا بینهایت کارکتر r داشته باشن.
                                </li>
                            </ul>
                        </li>
                        <li>
                            عملگر OR : | یا []
                            <ul>
                                <li>/a(b|c)/ : یعنی رشته هایی رو برگردون که اولشون a و در ادامه b یا c داشته باشن</li>
                                <li>/a[bc]/ : اینم دقیقا مثل بالایه</li>
                                <li>/a[b-d]/ : یعنی رشته هایی رو برگردون که اولشون a و در ادامه b تا d رو دارن (b تا d به معنی حروف b c d است)</li>
                                <li>توجه کنید که وقتی [a-z] رو بنویسیم یعنی حروف الفبای a تا z انگلیسی رو در نظر بگیر</li>
                            </ul>
                        </li>
                        <li>
                            فلگ ها : regex ها معمولا به صورت /abc/ نوشته میشن اما فلگ هایی هم دارن که میتونیم در ادامه ازشون استفاده کنیم :
                            <ul>
                                <li>/abc/g : اگر از فلگ g استفاده کنید باعث میشه که همه رشته هارو برگردونه ، ولی اگر بدون این فلگ استفاده کنید فقط رشته اول الگو برمیگرده!</li>
                                <li>/abc/i : فلگ i برای مواقعی استفاده میشه که بزرگی و کوچیکی حروف براتون اهمیت نداره مثلا توی همین مثال بزرگ و کوچیکی abc فرقی نمکینه!</li>
                            </ul>
                        </li>
                    </ol>
                    <br>
                    <p>
                        حالا که تونستیم یچیزایی یاد بگیریم ، یه چنتا مثال میزنم تا با ترکیب این ها آشنا بشیم ، البته اول بزارید مثال قبلیمون که در مورد پیدا کردن شماره موبایل بود رو تکمیل کنیم ، ریجکسش میشه ایین پایینی :
                    </p>
                    <pre>
                        <code class="language-regex">
                            pattern : /09[0-9]{9}/g

                            در قسمت بالا اول 09 رو گذاشتیم که یعنی با 09 شروع بشه
                             در قسمت بعدی داخل براکت [9-0] گذاشتیم که یعنی بعد از 09 میتونه هر عددی از 0 تا 9 باشه
                             در قسمت بعد در داخل آکولاد {9} گذاشتیم که تعداد رو مشخص میکنه
                            یعنی اعداد 0 تا 9 به تعداد 9 بار پشت هم قرار بگیرن که بعلاوه 09 اول میشه 11 رقم
                            که میشه شماره موبایل ، به همین راحتی
                            و از فلگ g استفاده کردیم تا همه رشته های تطبیقی رو برگردونه و نه فقط اولی

                        </code>
                    </pre>
                    <pre>
                        <code class="language-regex">
                            این زیر چنتا مثال دیگه از این قواعد گذاشتم که ترکیبشونو ببنید

                            pattern = /[a-z]{5}/ig
                            الگوی بالا دقیقا همه کلمات 5 حرفی رو برمیگردونه و به خاطر فلگ آی بزرگ و کوچیکی حروف مهم نیست
                            الگو زیر هم دقیقا مثل بالاعه ولی بجاش از فلگ آی استفاده نکردیم
                            pattern = /[a-zA-Z]{5}/g


                            pattern2 = /amir\s[a-zA-Z]*/g
                            الگو بالا یکم سخت تره و یه چیزی بینش داره که مطمئنن براتون عجیبه
                            در قسمت اول نوشتم امیر ، پس تا فعلا دنبال امیر میگرده
                            \s
                            به معنی فاصله (همون اسپیس) است پس تا الان دنبال امیر با یه فضای خالی میگرده
                            در ادامه از دستور
                            [a-zA-Z]*
                            استفاده کردیم که یعنی هر کلمه ایی با هر تعداد میتونه باشه
                            پس این الگو تمام رشته هایی که با امیر و فضای خالی + یک کلمه 0 تا بی نهایت حرفی شروع میشه رو برمیگردونه
                            مثلا کلمات زیر رو برمیگردونه :
                            amir roox , amir ziba , amir box
                            و کلمات زیر رو بر نمیگردونه :
                            am roox  , am ir , roox amir
                        </code>
                    </pre>
                    <p>
                        حالا برسیم سر تابعی که داشتیم سرش بحث میکردیم ، یادت میاد چی بود دیگه ؟ آفرین تابع search ، با این تابع میتونیم
                        از regex استفاده کنیم و جست و جوی پیشرفته تری داشته باشم!
                    </p>
                    <pre>
                        <code>
                            string.search(رشته یا الگوی شما)
                        </code>
                    </pre>
                    <pre>
                                <code>
                                    let string = 'I love JavaScript. If you do not love JavaScript what else can you love.'
                                    console.log(string.search('love'))          // 2
                                    console.log(string.search(/javascript/gi))  // 7
                                    // توجه کنید که تو دستور بالا دنبال کلمه جاوا اسکریپت میگردیم بدون اهمیت دادن به بزرگی و کوچیکی
                                </code>
                        </pre>
                    <p>
                        <b>
                            تابع match :
                        </b>
                        این تابع هم در واقع مثل تابع بالا کار میکنه و میتونید بهش regex پاس بدید با این فرق که اگر وجود داشت یک آرایه بر میگردونه
                        و اگر وجود نداشت null بر میگردونه (توجه کنید که فرق این تابع با تابع search در خروجیشونه)
                    </p>
                    <pre>
                        <code>
                            string.match(رشته یا الگوی شما)
                        </code>
                    </pre>
                    <pre>
                                <code>
                                    let string = 'I love JavaScript. If you do not love JavaScript what else can you love.'
                                    console.log(string.match('love'))

                                    // خروجی تابع بالا این پایینیست :
                                    // ["love", index: 2, input: "I love JavaScript. If you do not love JavaScript what else can you love.", groups: undefined]

                                    // و اگر هم از ریجکس استفاده کنیم ، مثل زیر خروجی میده
                                    let pattern = /love/gi
                                    console.log(string.match(pattern))   // ["love", "love", "love"]
                                </code>
                        </pre>
                    <pre>
                        <code>
                            // میخوام اون مسئله شماره رو اینجا حل کنم
                            let string = '09123456565 amirroox amir 09122456565 roo 091232323 09723456565 093a29283'
                            console.log(string.match(/09[0-9]{9}/g))   // ['09123456565', '09122456565', '09723456565']

                            /*
                            اگر توجه کنید ما توی تابع
                            search
                            نمیتونستیم تمام شماره هارو به دست بیاریم
                            اما اینجا به راحتی میتونیم شماره ها رو دریافت کنیم . چرا ؟
                             چون خروجی تابع سرچ یک عدده ولی خروجی این تابع یک آرایه است
                            */
                        </code>
                    </pre>
                    <p>
                        <b>
                            آخرین تابع ، تابع repeat :
                        </b>
                        شاید خسته شده باشید تا اینجا که فقط میتونم بگم خسته نباشید (البته من باید خسته تر باشم من این همرو نوشتمممم!)
                        این تابع هم همونجوری که از اسمش پیداست باعث تکرار میشه ، یعنی یه عدد بهش پاس میدید و رشته شما رو به اون تعداد تکرار میکنه(چه کار خزی!حس میکنم خود کلمه خز هم خز شده!)
                    </p>
                    <pre>
                        <code>
                            string.repeat(عدد)
                        </code>
                    </pre>
                    <pre>
                                <code>
                                    let string = 'Kuss'
                                    console.log(string.repeat(10)) // KussKussKussKussKussKussKussKussKussKuss

                                    // بد برداشت نکنیدا این کلمه به زبان آلمانی میشه بوس
                                </code>
                        </pre>
                </div>
        <h1 id="checking-data-types-and-casting">چک کردن انواع داده و تبدیل آنها به هم</h1>
            <h2 id="checking-data-types">چک کردن انواع داده</h2>
                <div>
                    <p>
                        قبلا هم برای بررسی نوع داده ها از typeof استفاده کردیم ولی باز من اینجا بهش اشاره میکنم تا یادتون نره
                    </p>
                    <pre>
                        <code>
                            let firstName = 'Amir'          // string
                            let lastName = 'Roox'           // string , فامیلی واقعیم نیست بخدا
                            let country = 'Iran'            // string
                            let city = 'Rasht'              // string
                            let age = 210                   // number, سن واقعیم نیست ، زیاد دقت نکنید
                            let job                         // undefined, چون بهش مقدار ندادیم

                            console.log(typeof 'Amir')  // string
                            console.log(typeof firstName)   // string
                            console.log(typeof 10)          // number
                            console.log(typeof 3.14)        // number
                            console.log(typeof true)        // boolean
                            console.log(typeof false)       // boolean
                            console.log(typeof NaN)         // number
                            console.log(typeof job)         // undefined
                            console.log(typeof undefined)   // undefined
                            console.log(typeof null)        // object
                        </code>
                    </pre>
                </div>
            <h2 id="changing-data-type-casting">تبدیل انواع داده به هم (Casting)</h2>
                <div>
                    <p>
                        به تبدیل انواع داده بهم میگیم کستینگ کردن (casting) یعنی مثلا شما میخواید رشته "12" رو تبدیل به عدد 12 کنید ، یکم جلوتر میفهمیم این تبدیل ها چرا به کارمون میان ،
                        شاید بگید خب از اول نوع داده درست رو انتخاب میکنیم ولی باید در جواب بگم که بعضی وقتا یا نمیشه یا انقدر دستوراتتون زیاده که گشتن و تغییر دادن به صرفه نیست ، و یا
                        صدها مورد دیگه وجود داره که نیاز داریم نوع داده خودمون رو تغییر بدیم ، اینجا چند موردش رو بررسی میکنیم عشقا !
                    </p>
                </div>
                <h3 id="string-to-int">String to Int (رشته به اعداد صحیح)</h3>
                    <div>
                        <p>
                            ما میتونیم با توابع زیر هر رشته ایی که بین تک کوتیشن یا دابل کوتیشن قرار داره رو تبدیل به عدد کنیم فقط توجه کنید که اگر رشته ایی
                            عدد نباشه تبدیل آن به عدد مقدار NaN (Not a Number) رو برمیگردنه ، مثلا رشته "13" به عدد تبدیل میشه اما رشته "amir" تبدیل به NaN میشه.
                        </p>
                        <ol>
                            این زیر 3 تا تابع رو معرفی کردم (توجه کنید این ها تابع های اصلی جاوا اسکریپت هستند و مثل تابع های شی استفاده نمیشن)
                            <li>parseInt()</li>
                            <li>Number()</li>
                            <li>علامت +</li>
                        </ol>
                        <pre>
                            <code>
                                let num = '10'
                                let numInt = parseInt(num)
                                console.log(numInt) // 10
                            </code>
                        </pre>
                        <pre>
                            <code>
                                let num = '10'
                                let numInt = Number(num)
                                console.log(numInt) // 10
                            </code>
                        </pre>
                        <pre>
                            <code>
                                let num = '10'
                                let numInt = +num
                                // این راحت ترین روش برای تبدیل رشته به عدده
                                console.log(numInt) // 10
                            </code>
                        </pre>
                    </div>
                <h3 id="string-to-float">String to Float (رشته به اعداد اعشاری)</h3>
                    <div>
                        <p>
                            در قسمت بالا رشته رو تبدیل به عدد صحیح کردیم ولی میشه با استفاده از تابع Number و علامت + رشته رو تبدیل به عدد اعشاری هم کرد ،
                            در واقع تابع Number و علامت + رشته ی دریافتی رو تبدیل به عدد میکنن ، اگر رشته اعشاری بود ، اعشاری بر میگرده و اگه صحیح بود ، صحیح بر میگرده!
                            <br>
                            همچنین تابع parseFloat وجود داره که مختص تبدیل رشته به عدد اعشاریه!
                        </p>
                        <pre>
                            <code>
                                let num = '9.81'
                                let numFloat = parseFloat(num)
                                console.log(numFloat) // 9.81

                                let num = '9.81'
                                let numFloat = Number(num)
                                console.log(numFloat) // 9.81

                                let num = '9.81'
                                let numFloat = +num
                                console.log(numFloat) // 9.81
                            </code>
                        </pre>
                    </div>
                <h3 id="float-to-int">Float to Int (اعداد اعشاری به اعداد صحیح)</h3>
                    <div>
                        <p>
                            تا حالا در مورد تبدیل رشته به اعداد صحبت کردیم ، حالا میرسیم به تبدیل اعشار به عدد صحیح ، مثلا 13.2 رو میخوایم تبدیل کنیم به 13 ؛ توجه داشته باشید که در
                            تبدیل اعداد اعشاری به اعداد صحیح ، همیشه اعداد به پایین گرد میشن ، یعنی 13.99 هم میشه 13.
                            <br>
                            بالا در مورد parseInt صحبت کردیم ، این تابع هم رشته و هم اعداد اعشاری رو تبدیل به عدد صحیح میکنه!
                        </p>
                        <pre>
                            <code>
                                let num = 9.81
                                let numInt = parseInt(num)

                                console.log(numInt) // 9
                            </code>
                        </pre>
                        <br>
                        <p>
                            اومممممم ، روز دومم تموم شد بلخره ؛ به خودتون افتخار کنید ، چرا چون که تا اینجا اومدید پس به آینده خودتون اهمیت میدید ! یکمی هم براتون تمرین گذاشتم تا دستتون گرم بشه و این چیزایی که یاد گرفتید رو به خاطر بسپرید!
                        </p>
                    </div>
        <h1 id="day-2-exercises">تمرینات روز دوم</h1>
            <h2 id="exercise-level-1">تمرین : سطح 1</h2>
                <div>
                    <ol>
                        <li>متغیری به نام Why بسازید و آرزوتو به صورت رشته بهش بدید </li>
                        <li>با استفاده از توابعی که یاد گرفتید آرزوتونو روی کنسول چاپ کنید</li>
                        <li>در ادامه طول این رشته رو بدست بیارید و توی کنسول چاپ کنید</li>
                        <li>با استفاده از توابع رشته ها کلمه اول و آخر جملتونو رو دریافت کنید و توی کنسول چاپ کنید</li>
                        <li>بررسی کنید که کلمه "آرزو من" در جملتون وجود داره یا نه</li>
                        <li>متغیر جدیدی بسازید و اسم 5 بازیگرو توش بنویسد و با کاما جدا کنید</li>
                        <li>حالا متغیر جدیدتون رو با استفاده از تابع split با کارکتر کاما جدا کنید و تبدیل به آرایه کنید</li>
                        <li>اسم یکی از بازیگرارو به اسم من یعنی امیر تغییر بدید (همینه که هست!)</li>
                        <li>آرزوتون رو توی کنسول 5 بار پشت سر هم تکرار کنید (استفاده از تابع)</li>
                        <li>توابع مختلفی که تا حالا یاد گرفتید رو تمرین کنید و با هم استفاده کنید </li>
                    </ol>
                </div>
            <h2 id="exercise-level-2">تمرین : سطح 2</h2>
                <div>
                    <ol>
                        <li>دو متغیر با مقادیر 13.4 و 13 بسازید</li>
                        <li>متغیر عدد اعشاری را به عدد صحیح تبدیل کنید</li>
                        <li>حالا مقایسه کنید که آیا دو عدد برابر هستند یا نه (از عملگر == استفاده کنید)</li>
                        <li>یک عدد تصادفی بین 0 تا 255 بسازید (با استفاده از شی Math)</li>
                        <li>با استفاده از کارکتر های کنترلی متن زیر رو روی کنسول چاپ کنید</li>
                        <pre>
                            <code class="language-text">
                                1 1 1 1 1
                                2 1 2 4 8
                                3 1 3 9 27
                                4 1 4 16 64
                                5 1 5 25 125
                            </code>
                        </pre>
                        <li>در مورد regex تحقیق کنید</li>
                        <li>بعد متن زیر رو داخل یه متغیر قرار بدید</li>
                        <pre>
                            <code class="language-text">
                                "Hello I am Amir Muhammad , My Best Number Is 13, and I am born in 1381 . numbers \
                                135232 123127232 87232 3237127361231266 2362783 236723 2637 237 1313 2323213 23123"
                            </code>
                        </pre>
                        <li>با استفاده از regex تمام اعداد دارای عدد 13 رو تبدیل به آرایه کنید و در کنسول چاپ کنید (از تابع match استفاده کنید) </li>
                        <li>آرایه بازگشتی باید مقدار زیر را داشته باشد :</li>
                        <pre>
                            <code class="language-text">
                                ['1381', '135232', '1313']
                            </code>
                        </pre>
                    </ol>
                </div>
            <h2 id="exercises-level-3">تمرینات : سطح 3</h2>
                <div>
                    <ol>
                        <li>حتما حتما تمامی توابع رو آزمایش کنید و تست کنید که کدوم از توابع از regex پشتیبانی میکنن (تحقیق کنید - تابع replace هم از regex پشتیبانی میکنه!)</li>
                        <li>ثابت زیر رو ایجاد کنید : </li>
                        <pre>
                            <code>
                                    const sentence = '%I $am@% a %tea@cher%, &and& I lo%#ve %te@a@ching%;. The@re $is no@th@ing; \
                                    &as& mo@re rewarding as educa@ting &and& @emp%o@weri@ng peo@ple. ;I found tea@ching m%o@re \
                                    interesting tha@n any ot#her %jo@bs. %Do@es thi%s mo@tiv#ate yo@u to be a tea@cher!? %Th#is \
                                    30#Days&OfJavaScript &is al@so $the $resu@lt of &love& of tea&ching'
                            </code>
                        </pre>
                        <li>با استفاده از regex حروف !@#$%^;?& رو از عبارت حذف کنید (این حروف رو با '' جایگزین کنید تا حذف بشن)</li>
                        <li>از تابع replace استفاده کنید و پس از تغییر آن را در کنسول چاپ کنید ، متن ویرایش شدتون باید همین زیریه باشه !</li>
                        <pre>
                            <code class="language-text">
                                'I am a teacher, and I love teaching. There is nothing as more rewarding as educating and empowering people.
                                I found teaching more interesting than any other jobs. Does this motivate you to be a teacher
                                This 30DaysOfJavaScript is also the result of love of teaching'
                            </code>
                        </pre>
                            <button onclick="alert('sentence.replace(/[!@#$%^;?&]/g , \'\')')"> اگه همه سعیتونو کردید و بازم نفهمیدید باید چیکار کنید این لینکو بزنید تا جوابشو بگیرید (فقط زمانی که واقعا تلاش کردید) </button>
                    </ol>

                </div>

</article>
<!-- End Article -->

<!-- Start Previous and Next Days -->
<div class="container Pre_Nex mg2b">
    <div class="row">
        <a href="<?='day'.$test[1]?>" class="col-xs-5 col-md-2">
            &rarr;
            روز بعدی (
            <?=$test[1] ?>
            )
        </a>
        <div class="col-xs-2 col-md-8"></div>
        <a href="<?='day'.$test[0]?>" class="col-xs-5 col-md-2">
            روز قبلی (
            <?=$test[0] ?>
            )
            &larr;
        </a>
    </div>
</div>
<!-- End Previous and Next Days -->

<!-- END MAIN -->

<!-- Up Button -->
<?php include MAIN_DIR . 'public/Main/Top_Button.php'?>
<!-- Down Button -->
<?php include MAIN_DIR . 'public/Main/To_Button.php'?>
<!-- Community -->
<?php require MAIN_DIR . "public/Main/Community.php" ?>
<!-- End Community -->
<!-- FOOTER -->
<?php require MAIN_DIR . "public/Main/Footer.php" ?>
<!-- END FOOTER -->


<!-- MAIN SCRIPT -->
<script src="<?= MAIN_SERVER . 'assets/vendor/jquery-3.7.0.min.js' ?>"></script>

<!-- Script For Response Menu -->
<script src="<?= MAIN_SERVER . 'assets/js/Response-Menu.js' ?>"></script>

<!-- Script For Prism -->
<script src="<?= MAIN_SERVER . 'assets/vendor/prism.js' ?>"></script>

<!-- Script Helper -->
<script src="<?= MAIN_SERVER . 'assets/js/Helper.js'?>"></script>

<!-- File Need It Code -->
<script src="<?= MAIN_SERVER . 'public/30Days/javascript/assets/FileNeedIt.js'?>"></script>

<!-- Scroll Function -->
<script src="<?= MAIN_SERVER . 'public/30Days/javascript/assets/script.js'?>"></script>
<!-- END MAIN SCRIPT-->
</body>
</html>